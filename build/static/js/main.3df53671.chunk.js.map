{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","_ref","sources","react_default","a","createElement","map","source","i","className","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","then","response","json","data","setState","keys","onSearchChange","event","searchfield","target","value","onSourceChange","results","state","_this$state","filteredSource","filter","toLowerCase","includes","length","src","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiBeA,MAff,SAAAC,GAA6B,IAAVC,EAAUD,EAAVC,QAClB,OACCC,EAAAC,EAAAC,cAAA,WACCH,EAAQI,IAAI,SAACC,EAAQC,GACpB,OACCL,EAAAC,EAAAC,cAAA,UAAQI,UAAU,mEAEhBP,EAAQM,QCIAE,MAZf,SAAAT,GAAmC,IAAfU,EAAeV,EAAfU,aACnB,OACCR,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACdN,EAAAC,EAAAC,cAAA,SACCI,UAAU,0CACVG,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCOCI,MAbf,SAAgBC,GACf,OACCb,EAAAC,EAAAC,cAAA,OAAKY,MACJ,CACCC,UAAW,SACXC,OAAQ,mBACRC,OAAQ,UAERJ,EAAMK,WC0CKC,qBA7Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,kBAAoB,WAClBC,MAAM,yBACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIZ,EAAKa,SAAS,CAAClC,QAASsB,OAAOa,KAAKF,QAXtCZ,EAcde,eAAiB,SAACC,GAChBhB,EAAKa,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAf7BnB,EAkBdoB,eAAiB,SAACJ,GAChBR,MAAM,gCACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIZ,EAAKa,SAAS,CAAClC,QAASiC,EAAKS,aAnB3CrB,EAAKsB,MAAQ,CACXL,YAAa,GACbtC,QAAS,IAJCqB,wEAwBL,IAAAuB,EACwBpB,KAAKmB,MAA7BL,EADAM,EACAN,YAAatC,EADb4C,EACa5C,QACd6C,EAAiB7C,EAAQ8C,OAAO,SAAAzC,GACpC,OAAOA,EAAO0C,cAAcC,SAASV,EAAYS,iBAEnD,OAAQ/C,EAAQiD,OAGZhD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,MACbN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAK+C,IAAI,6GAA6GhC,OAAO,SAE/HjB,EAAAC,EAAAC,cAACgD,EAAD,CAAW1C,aAAce,KAAKY,iBAC9BnC,EAAAC,EAAAC,cAACiD,EAAD,KACEnD,EAAAC,EAAAC,cAACkD,EAAD,CAAUrD,QAAS6C,MARzB5C,EAAAC,EAAAC,cAAA,MAAII,UAAU,aAAd,kBA/BY+C,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.3df53671.chunk.js","sourcesContent":["import React from 'react';\n\nfunction CardList({sources}) {\n\treturn(\n\t\t<div>{\n\t\t\tsources.map((source, i) => {\n\t\t\t\treturn(\n\t\t\t\t\t<button className='black br3 pa3 ma2 grow shadow-5 dib bg-yellow classify starwars'\n\t\t\t\t\t>\n\t\t\t\t\t\t{sources[i]}\n\t\t\t\t\t</button>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t);\n}\nexport default CardList;","import React from 'react';\nfunction SearchBox({searchChange}) {\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='tc br3 pa3 ba b--yellow bg-light-yellow'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search categories'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nfunction Scroll(props) {\n\treturn(\n\t\t<div style={\n\t\t\t{\n\t\t\t\toverflowY: 'scroll',\n\t\t\t\tborder: '50px solid black', \n\t\t\t\theight: '800px'}\n\t\t\t}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component{\n  constructor() {\n    super()\n    this.state = {\n      searchfield: '',\n      sources: []\n    }\n  }\n\n  componentDidMount = () => {\n    fetch('https://swapi.co/api/')\n    .then(response => response.json())\n    .then(data => this.setState({sources: Object.keys(data)}));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  onSourceChange = (event) => {\n    fetch('https://swapi.co/api/people/')\n    .then(response => response.json())\n    .then(data => this.setState({sources: data.results}));\n  }\n\n  render() {\n    const {searchfield, sources} = this.state;\n    const filteredSource = sources.filter(source => {\n      return source.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !sources.length ?\n      <h1 className='tc yellow'>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1>\n            <img src='https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Star_Wars_Logo.svg/1280px-Star_Wars_Logo.svg.png' height=\"200\"/>\n          </h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList sources={filteredSource}/>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}